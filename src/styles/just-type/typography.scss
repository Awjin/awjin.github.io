@use 'sass:map';
@use 'config';

@mixin typography {
  font-family: map.get(config.$font-stack, 'body');
  font-size: config.$font-size-static;
  @media all and (min-width: config.$breakpoint){
    font-size: config.$font-size-responsive;
  }
  line-height: get('line-height', 'normal');
  color: map.get(config.$color, 'normal');

  h1,
  h2,
  h3,
  h4,
  p,
  ol,
  ul {
    margin: 0 0 config.$whitespace 0;
  }

  h1,
  h2,
  h3,
  h4 {
    font-family: map.get(config.$font-stack, 'headings');
    font-weight: normal;
    line-height: get('line-height', 'small');
  }

  h1 {
    font-size: scale('font-size', 3);
  }

  h2 {
    margin-top: scale('whitespace', 2);
    font-size: scale('font-size', 2);
  }

  h3 {
    margin-top: scale('whitespace', 1);
    font-size: scale('font-size', 1);
  }

  h4 {
    margin-top: scale('whitespace', 0);
    font-size: scale('font-size', 0);
    font-style: italic;
  }

  h1 + *,
  h2 + h3,
  h3 + h4 {
    margin-top: 2 * config.$whitespace;
  }

  p + ol,
  p + ul {
    margin-top: -0.25 * config.$whitespace;
  }

  ol,
  ul {
    padding-left: 2.25 * config.$whitespace;
    line-height: get('line-height', 'large');

    ol,
    ul {
      padding-left: 2 * config.$whitespace;
    }
  }

  li {
    margin: 0 0 (0.25 * config.$whitespace) 0;
    padding-left: 0.25 * config.$whitespace;

    ol,
    ul {
      margin: (0.25 * config.$whitespace) 0;
    }
  }

  a {
    text-decoration: none;
    color: map.get(config.$color, 'action');

    &:hover,
    &:active,
    &:focus {
      text-decoration: underline;
    }
  }

  code {
    font-family: map.get(config.$font-stack, 'mono');
    font-size: get('font-size', 'small');
  }

  iframe,
  img,
  figure,
  table {
    margin: (1.66667 * config.$whitespace) 0;
  }

  img {
    display: block;
    max-width: 100%;
  }

  img + figcaption {
    margin-top: -1 * config.$whitespace;
  }

  figcaption {
    font-size: get('font-size', 'small');
    font-style: italic;
    color: map.get(config.$color, 'light');
  }

  table {
    width: 100%;
    border-collapse: collapse;
    border-spacing: 0;
    text-align: left;
    font-size: get('font-size', 'small');
  }

  caption {
    margin-top: 0.5 * config.$whitespace;
    caption-side: bottom;
    text-align: left;
    font-style: italic;
    color: map.get(config.$color, 'light');
  }

  thead,
  tfoot,
  th {
    background: rgba(0, 0, 0, 0.1);
    font-family: map.get(config.$font-stack, 'headings');
    font-weight: bold;
  }

  tr {
    border: 1px solid map.get(config.$color, 'light');
  }

  th,
  td {
    vertical-align: top;
    padding: (0.5 * config.$whitespace) (0.66667 * config.$whitespace);
  }

  blockquote,
  pre {
    margin: (1.33333 * config.$whitespace) 0;
  }

  blockquote {
    border-left: 1px solid map.get(config.$color, 'light');
    padding-left: 0.66667 * config.$whitespace;
    font-style: italic;
    color: map.get(config.$color, 'light');
  }

  pre {
    overflow-x: auto;
    border: 1px solid map.get(config.$color, 'light');
    padding: (0.66667 * config.$whitespace) config.$whitespace (0.75 * config.$whitespace) config.$whitespace;
    font-size: get('font-size', 'small');
  }

  hr {
    width: 100%;
    height: 1px;
    margin: scale('whitespace', 2) 0;
    border: none;
    background: map.get(config.$color, 'light');
  }
}

@function scale($key, $exponent) {
  @if $exponent < 0 {
    @error 'Negative scaling is not supported.';
  }

  $value: null;
  @if $key == 'font-size' {
    $value: get('font-size', 'normal');
  } @else if $key == 'whitespace' {
    $value: config.$whitespace;
  } @else {
    @error 'Scaling #{$key} is not supported';
  }
  $coefficient: map.get(config.$scale, $key, 'coefficient');
  $ratio: map.get(config.$scale, $key, 'ratio');

  $growth: 1;
  @for $i from 1 through $exponent {
    $growth: $growth * $ratio;
  }

  @return $value * $coefficient * $growth;
}

@function get($keys...) {
  $values: (
    'font-size': (
      'normal': 1em,
      'small': 0.9em,
    ),
    'line-height': (
      'normal': config.$line-height,
      'small': 0.9 * config.$line-height,
      'large': 1.1 * config.$line-height,
    ),
  );

  @return map.get($values, $keys...);
}
